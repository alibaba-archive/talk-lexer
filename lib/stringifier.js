// Generated by CoffeeScript 1.8.0
(function() {
  var stringifierMap, toHtml, toString, toText, whitelist;

  whitelist = require('./whitelist');

  toString = Object.prototype.toString;

  stringifierMap = {
    "default": function(node) {
      var attrs, data, k, text, type, v;
      type = node.type, text = node.text, data = node.data;
      data || (data = {});
      attrs = (function() {
        var _results;
        _results = [];
        for (k in data) {
          v = data[k];
          _results.push("data-" + k + "=\"" + v + "\"");
        }
        return _results;
      })();
      return "<" + type + " " + (attrs.join(' ')) + ">" + text + "</" + type + ">";
    },
    mention: function(node) {
      return stringifierMap["default"](node);
    },
    link: function(node) {
      var href, text, type;
      type = node.type, href = node.href, text = node.text;
      return "<a href=\"" + href + "\" class=\"lexer-link\" rel=\"noreferrer\" target=\"_blank\">" + text + "</a>";
    }
  };

  toHtml = function(structure) {
    return structure.map(function(node) {
      var data, text, type;
      if (toString.call(node) === '[object String]') {
        return node;
      }
      if (node == null) {
        return '';
      }
      type = node.type, text = node.text, data = node.data;
      if (!(whitelist[type] && typeof stringifierMap[type] === 'function')) {
        return '';
      }
      return stringifierMap[type](node);
    }).join('');
  };

  toText = function(structure) {
    return structure.map(function(node) {
      var data, text, type;
      if (toString.call(node) === '[object String]') {
        return node;
      }
      if (node == null) {
        return '';
      }
      type = node.type, text = node.text, data = node.data;
      if (!whitelist[type]) {
        return '';
      }
      return text || '';
    }).join('');
  };

  module.exports = {
    toHtml: toHtml,
    toText: toText
  };

}).call(this);
